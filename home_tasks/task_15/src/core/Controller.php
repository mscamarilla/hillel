<?php


namespace Core;


/**
 * Class Controller
 * @package Core
 */
class Controller
{
    /**
     * @var ViewInterface
     */
    protected $view;


    /**
     * Controller constructor.
     * @param ViewInterface $view
     */
    function __construct(ViewInterface $view)
    {
        $view_name = str_replace('Controller', 'View', implode('', array_slice(explode('\\', get_class($this)), -1)));

        $this->view = $view;
        $this->view->setViewName($view_name . '.php');


        if (!empty($_SERVER['HTTP_AUTH_TOKEN'])) {
            $this->loadModel('model_user');
            $this->auth($_SERVER['HTTP_AUTH_TOKEN']);
        } else {
            header(sprintf("Location: %s", 'index.php?route=error/forbidden'));
        }


    }

    /**
     * Create new model throught new autogenerated property
     * @param string $model_alias
     */
    protected function loadModel(string $model_alias): void
    {
        $model_name = $this->renameModel($model_alias);

        $this->$model_alias = new $model_name;

    }

    /**
     * Transform model name from "model_name" to "\Model\\ModelName"
     * @param string $model_alias
     * @return string
     */
    protected function renameModel(string $model_alias): string
    {
        $model_name_parts = explode('_', $model_alias);

        foreach ($model_name_parts as $value) {
            $model_name_array[] = ucfirst($value);
        }

        $model_name = '\Model\\' . implode('', $model_name_array);

        return $model_name;

    }

    /**
     * User authentication
     * @param string $token
     * @return bool
     */
    protected function auth(string $token): bool
    {
        if ($this->isTokenValid($token)) {

            $this->model_user->setToken($token);
            $user_id = $this->model_user->getUserIdByToken();
            $this->model_user->setId($user_id);

            return true;
        } else {

            return false;
        }

    }

    /**
     * Uset token check
     * @param string $token
     * @return bool
     */
    private function isTokenValid(string $token): bool
    {

        if ($this->model_user->isTokenValid($token)) {

            return true;
        } else {

            return false;
        }
    }

}
